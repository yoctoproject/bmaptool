[tox]
envlist = py3{8,9,10,11,12}-{linux,macos,windows}
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[gh-actions:env]
PLATFORM =
    ubuntu-22.04: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm[toml]

[build]
deps =
    pip>=21.1
    hatch

[testenv]
skip_install = true

setenv =
    COVERAGE_FILE = .coverage.{envname}
    PYTHONPATH = {toxinidir}/src

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    .[test,cov,dev]

commands =
    python -m pytest -v . --basetemp="{envtmpdir}" --cov=bmaptool --cov-branch --cov-report term-missing {posargs}

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py38
    py39
    py310
    py311
    py312

[coverage:run]
parallel=True

[testenv:dev]
skip_install = true

setenv =
    PYTHONPATH = {toxinidir}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    -r requirements.txt
    -e .[dev]

commands =
    pytest -v --basetemp="{envtmpdir}" {posargs}
    bmaptool -h

[testenv:changes]
skip_install = true

allowlist_externals =
    {[testenv:dev]allowlist_externals}

passenv =
    {[testenv:dev]passenv}

deps =
    pip>=21.1
    https://github.com/sarnold/gitchangelog/releases/download/3.2.0/gitchangelog-3.2.0-py3-none-any.whl

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.md'

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'rm -rf src/*.egg-info dump.* .coverage.* src/*/__pycache__ dist/ build/'

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[build]deps}
    twine

commands =
    hatch build
    twine check dist/*

[testenv:check]
skip_install = true
passenv = CI

deps =
    #{[base]deps}
    pip>=21.1

commands =
    pip install bmaptool --force-reinstall --pre --prefer-binary -f dist/
    bmaptool --version

[testenv:lint]
passenv =
    CI
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    -r requirements.txt

commands =
    pylint --fail-under=8.0 --ignore=_version.py src/bmaptool/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 src/bmaptool/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    mypy
    -r requirements.txt
    types-defusedxml

commands =
    python -m mypy --follow-imports=normal --install-types --non-interactive src/bmaptool/

[testenv:black]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    black

commands =
    black -v -S src/bmaptool/ {posargs}

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    bandit[toml]

commands =
    bandit -c pyproject.toml -r src/bmaptool/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort
    -r requirements.txt

commands =
    python -m isort src/bmaptool/

[flake8]
extend-ignore = E203
max-line-length = 88
exclude =
    .git,
    __pycache__,
    debian,
    build,
    dist
max-complexity = 20
